{"name":"Anime Music Player","tagline":"Java command line music player for playing your favorite anime theme songs.","body":"# Anime Music Player\r\n\r\n**Java command line music player for playing your favorite anime theme songs.**\r\n\r\nThis is a Java program that plays the anime theme or related songs selected by \r\nthe user or different play-list sources (files, strings, shuffled, all songs) \r\nand displays the corresponding song artwork. You can add more songs and artwork \r\nby putting them in the corresponding folders, with the standard file name \r\nextensions specified. Then add them to the \"songlist\" of choice, \r\nEX: \"default.songlist\". \r\nThis allows for a simple and easy to use command line music player.\r\n\r\n<hr>\r\n\r\n### Usage:\r\n\r\n#### Windows:\r\n\r\nDouble click on the program run.exe or run.bat to start a script that compiles \r\nand runs the program. \r\n\r\nOR\r\n\r\nIn the command line use the following commands to compile and execute the \r\nprogram:\r\n\r\n```batch\r\nREM compiles the code\r\njavac -XDignore.symbol.file -d bin ./src/*.java\r\n\r\nREM runs Anime Music Player\r\njava -cp ./bin PlayMusic \r\n```\r\n#### Unix\r\n\r\nIn the command line use the following commands to compile and execute the \r\nprogram:\r\n```bash\r\n# compiles the code\r\njavac -XDignore.symbol.file -d bin ./src/*.java\r\n\r\n# runs Anime Music Player\r\njava -cp ./bin PlayMusic\r\n```\r\n\r\n<hr>\r\n### Contents:\r\n\t\r\n* `./mus/` - Folder containing the music files that the music player can play.\r\nStandard file extension/format is \".wav\". \r\n\r\n* `./art/` - Folder containing the song artwork image files that the music player\r\ncan play. Standard file extension/format is \".png\". \r\n\r\n* `*.songlist` - Song list files that contain the titles and names of the \r\nsongs to choose from and played. MUST be in the following format:\r\n```text\r\nExiting\r\nexit\r\n(title of song 1)\r\n(file name 1)\r\n(title of song 2)\r\n(file name 2)\r\n.\r\n.\r\n.\r\n(title of song n)\r\n(file name n)\r\n```\r\nwhere (title of song #) is the official name of the song to be \r\ndisplayed, and (file name #) is the file name of the corresponding music and \r\nartwork file. \r\nAlso, (file name) does not include the file extension, it is just the \r\nbase name, and the first two lines are devoted to the exiting option \r\nwhere the second line MUST be the word \"exit\", with out quotes. ALL \r\nlines end with a newline EXCEPT for the last one.\r\n\r\n* `*.sl2` - Songlist 2.0, a standard songlist file that has been extended to \r\ninclude separate filename for the music and artwork as well as a album\r\ntitle. This is the new standard songlist that AMP currently uses. The\r\nformat is as follows:\r\n```text\r\nExiting\r\nexit\r\nexit\r\nexit\r\n(title of song 1)\r\n(music file name 1)\r\n(artwork file name 1)\r\n(album name 1)\r\n(title of song 2)\r\n(music file name 2)\r\n(artwork file name 2)\r\n(album name 2)\r\n.\r\n.\r\n.\r\n(title of song n)\r\n(music file name n)\r\n(artwork file name n)\r\n(album name n)\r\n```\r\n\r\n* `sample.sl2` - Songlist 2.0 file containing every file available. It is \r\nrecommended that if any new songs/artwork is added to the mus/art \r\nfolders then add them to default.sl2 as well.\r\n\r\n* `*.play` - Play-list files that are read by the Anime Music Player to play \r\nfrom a file. Must be in the format `# # # # 0`, where # is a number \r\ncorresponding to the song selection, and the white space is either a space, \r\ntab, or new line. (NOTE: ALLWAYS end a .play file with a 0 to exit, \r\nunpredictable behavior otherwise.)\r\n\t\r\n* `PlayMusic.java` - Controls the music player getting the users input and \r\nprocessing them. Determines what music to play and what are work to \r\ndisplay. (NOTE: This is what gets run from either the exe/bat or from \r\nthe terminal cmd.)\r\n\r\n* `MusicPlayer.java` - Public Interface for music players, alls music players \r\nimplement this interface.\r\n\r\n* `AnimeMusicPlayer.java` - The Anime Music Player's MusicPlayer that starts, \r\nstops, and keeps track of if a song has been played.\r\n\r\n* `ArtFrame.java` - JFrame extension that is designed to show Art, song \r\nartwork. Able to paint the image from the image file and repaint with a \r\nnew image.\r\n\r\n* `NoSongPlayingException.java` - A Exception that is thrown when a Music \r\nPlayer tries to stop the current song when no song is playing.\r\n\r\n* `SongDetails.java` - Class used to store information about a single song. \r\nContains field for the title, file name (music and art), and the album\r\nname.\r\n\r\n* `./javadocs/` - Folder containing documentation of the source code. Open \r\n`./javadocs/index.html` to view.\r\n\r\n* `./javadocs/document.bat` - Batch script to document the java source code in \r\n`./src` and store them in `./javadocs/`\r\n\t\r\n* `run.bat` - Batch script that compiles and runs the AnimeMusicPlayer program\r\n\r\n* `run.exe` - .exe version of run.bat\r\n\r\n* `screen.png` - Screen shot of the program running, playing a song and \r\ndisplaying the corresponding artwork.\r\n\t\t\r\n* `anime.ico` - The icon file for run.exe.\r\n<br><hr><br>\r\n<img src = \"./screen.png\" title = \"Anime Music Players\" width = \"100%\">\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}